<template>
<view wx:for="{{ list }}" class="detail-item"
  wx:for-index="index" wx:key="index" wx:for-item="detail">

  <view class="left">
    <view wx:if="{{ detail.date.isSpec }}" class="spec">{{ detail.date.text }}</view>
    <view wx:else>
      <text class="day">{{ detail.date.day }}</text>
      <text class="month">{{ detail.date.month }}月</text>
    </view>
  </view>

  <view class="right">
    <block wx:for="{{ detail.data }}" wx:for-index="index"
      wx:key="index" wx:for-item="item">

      <view class="report">
        <block wx:if="{{ item.type === 'blood' }}">
          <view>
            <text>今日血压：</text>
            <text style="color:{{ item.value[0].textColor }}">{{ item.value[0].value }}</text>
            <text> / </text>
            <text style="color:{{ item.value[1].textColor }}">{{ item.value[1].value }}</text>
            <text> mmHg</text>
          </view>

          <view>
            <text>心率：</text><text style="color:{{ item.value[2].textColor }}">{{ item.value[2].value }}</text>
            <text> bpm</text>
          </view>
        </block>

        <view wx:elif="{{ item.type === 'sugar' }}">
          <text>今日血糖：</text>
          <text>{{ item.value.name }} </text>
          <text style="color: {{ item.value.textColor }}">{{ item.value.value }}</text>
          <text> mmol/L</text>
        </view>

        <block wx:elif="{{ item.type === 'weight' }}">
          <view>
            <text>今日体重：</text>
            <text style="color:{{ item.value.textColor }}">{{ item.value.value }}</text>
            <text> kg</text>
          </view>

          <view>
            <text>BMI指数：</text>
            <text style="color:{{ item.value.textColor }}">{{ item.value.para }}</text>
          </view>
        </block>

        <view wx:elif="{{ item.type === 'medindex' }}">
          <text>今日医学指标：</text>
          <text>{{ item.value.name }} </text>
          <text style="color: {{ item.value.textColor }}">{{ item.value.value }}</text>
          <text> {{ item.value.para }}</text>
        </view>
      </view>
      <view class="remark">
        {{
          item.type === 'blood' ?
            item.value[0].remarkShowText :
            item.value.remarkShowText
        }}
      </view>
    </block>
  </view>

</view>
</template>

<script>
import wepy from 'wepy'

export default class Detail extends wepy.component {
  props = {
    detailList: {
      type: Array,
      default: []
    }
  }

  computed = {
    list() {
      const that = this
      const processValue = val => Object.assign(
        {}, val,
        {
          remarkShowText: val.remark.length > 50
            ? val.remark.slice(0, 50) + '...' : val.remark, // 对remark文字进行截断处理
          textColor: this.getTextColor(val.value, val.range) // 计算文本颜色
        }
      )
      const list = this.detailList.map(v => {
        return Object.assign({}, v, {
          date: that.specialDay(v.date),
          data: v.data.map(data => Object.assign({}, data, {
            value: data.value.map ? data.value.map(processValue) : processValue(data.value)
          })) // 对于数组和单个值分开处理
        })
      })
      // console.log(list)
      return list
    }
  }

  /**
   * 判断日期是否为今天和明天的特殊时间
   * @param {Date} tdate
   * @return {Object} => {
   *    isSpec: Boolean // 是否为特殊时间
   *    text: String // 今天或明天
   *    month: String // 月份
   *    day: String // 日期
   *  }
   */
  specialDay(tdate) {
    const today = new Date()
    const date = new Date(tdate)
    const tMonth = today.getMonth() + 1
    const tDay = today.getDate()
    const month = date.getMonth() + 1
    const day = date.getDate()
    const dict = ['今天', '昨天']
    if (tMonth === month && tDay - day <= 1) {
      return {
        isSpec: true,
        text: dict[tDay - day]
      }
    } else {
      return {
        isSpec: false,
        month,
        day: day < 10 ? `0${day}` : day
      }
    }
  }

  /**
   * 获取某个值对应的颜色
   * @param {Number} value
   * @param {Object} range
   * @param {String} color
   */
  getTextColor(value, range) {
    const colorSet = {
      low: 'blue',
      normal: 'green',
      slight: 'dodgerblue',
      moderate: 'red',
      severe: 'darkred'
    }
    let inRange = null
    Object.keys(range).forEach(v => {
      const [min, max] = range[v]
      if (value >= min && value < max) {
        inRange = v
      }
    })
    // console.log(colorSet[inRange])
    return colorSet[inRange] || '#aaa'
  }
}
</script>
<style lang="less">
.detail-item {
  display: flex;
  margin-top: 50rpx;
  padding: 0 20rpx;

  .left {
    min-width: 150rpx;
    justify-content: center;
    display: flex;
    font-weight: bold;
    
    .spec {
      font-size: 52rpx;
    }

    .day {
      font-size: 50rpx;
    }

    .month {
      font-size: 24rpx;
    }
  }
  .right {
    flex-grow: 1;

    .report {
      font-size: 24rpx;
      background-color: #eee;
      padding: 10rpx 20rpx;
      margin-top: 10rpx;
      color: #555;
      display: flex;
      justify-content: space-between;
    }

    .remark {
      font-size: 32rpx;
      padding: 10rpx;
    }
  }
}
</style>
